
import requests
import os
import pandas as pd
import fuzzywuzzy
from fuzzywuzzy import fuzz

#initialize the session
session_url = 'https://www.alacalc.com/api/v1/sessions'

#creating the session
login_url = session_url
#login details
login_data = {
    'email': "Matthew.Marshall@royalautomobileclub.co.uk",
    'api_access_key': "6f815087918983ca4dc13228c4b4dffa"
}
#establish variable repsone to post data
response = requests.post(login_url, data=login_data)
response.raise_for_status() #checking for errors

#store sess cookie for future requests
cookie = response.cookies 


id_list = [359561, 359562, 359967, 359985, 359988, 360012, 360025, 360030, 360041, 360044, 360045, 360048, 360058, 360060, 360061, 360062, 360065, 360066, 360069, 360073, 360080, 360084, 360085, 360090, 360101, 360103, 360104, 360110, 360117, 360126, 360127, 360133, 360136, 360176, 360178, 360180, 360181, 360185, 360186, 360187, 360188, 360189, 360191, 360204, 360205, 360206, 360210, 360231, 360232, 360252, 360259, 360265, 360269, 360270, 360306, 360308, 360325, 360330, 360334, 360337, 360338, 360354, 360360, 360364, 360366, 360367, 360368, 360370, 360371, 360372, 360381, 360385, 360386, 360387, 360391, 360395, 360398, 360405, 360411, 360442, 360443, 360445, 360450, 360451, 360453, 360455, 360456, 360457, 360458, 360464, 360470, 360471, 360476, 360488, 360499, 360504, 360509, 360511, 360516, 360522, 360523, 360526, 360527, 360529, 360534, 360538, 360557, 360560, 360561, 360563, 360564, 360569, 360578, 360584, 360598, 360614, 360616, 360617, 360618, 360620, 360718, 360721, 360726, 360814, 360816, 360818, 360819, 360821, 360878, 360888, 361105, 361107, 361110, 361116, 361119, 361153, 361168, 361184, 361190, 361191, 361195, 361196, 361197, 361198, 361200, 361208, 361210, 361211, 361212, 361214, 361215, 361219, 361220, 361226, 361232, 361234, 361236, 361258, 361264, 361290, 361295, 361314, 361319, 361320, 361331, 361351, 361355, 361358, 361361, 361378, 361379, 361698, 361702, 361720, 361722, 361724, 361752, 361755, 361756, 361758, 361761, 361765, 361767, 361769, 361774, 361838, 361841, 361844, 361849, 361920, 361924, 361935, 361936, 361945, 361952, 361955, 361956, 361960, 361982, 362004, 362010, 362092, 362093, 362143, 362146, 362148, 362157, 362170, 362171, 362172, 362174, 362181, 362184, 362193, 362200, 362207, 362210, 362216, 362219, 362222, 362234, 362237, 362241, 362247, 362252, 362254, 362263, 362265, 362266, 362273, 362275, 362276, 362280, 362283, 362284, 362286, 362351, 362352, 362354, 362356, 362357, 362359, 362360, 362363, 362366, 362367, 362369, 362370, 362371, 362379, 362383, 362558, 362635, 362638, 362644, 362646, 362649, 362651, 362652, 362964, 362965, 362969, 362970, 362976, 362977, 362979, 362981, 362985, 362989, 362991, 362993, 362999, 363026, 363047, 363063, 363073, 363086, 363088, 363093, 363097, 363173, 363174, 363178, 363189, 363191, 363274, 363275, 363276, 363277, 363282, 363287, 363299, 363301, 363304, 363307, 363309, 363310, 363312, 363314, 363315, 363318, 363320, 363321, 363324, 363447, 363579, 363587, 363588, 363589, 363591, 363599, 363601, 363602, 363604, 363605, 363608, 363609, 363621, 363622, 363623, 363624, 363625, 363627, 363628, 363629, 363630, 363959, 363964, 363970, 363973, 364329, 364336, 364339, 364341, 364342, 364344, 364345, 364346, 364347, 364348, 364349, 364350, 364351, 364354, 364355, 364360, 364363, 364366, 364482, 364484, 364485, 364487, 364491, 364927, 364936, 364947, 364949, 364951, 364954, 364955, 364967, 364968, 364973, 364976, 364978, 364989, 365004, 365006, 365009, 365021, 365025, 365028, 365031, 365035, 365037, 365043, 365044, 365046, 365050, 365051, 365052, 365054, 365055, 365056, 365057, 365058, 365063, 365066, 365067, 365068, 365120, 365124, 365126, 365128, 365178, 365182, 365183, 365184, 365220, 365226, 365227, 365229, 365231, 365237, 365254, 365255, 365258, 365260, 365261, 365262, 365265, 365271, 365273, 365274, 365275, 365276, 365277, 365278, 365280, 365283, 365284, 365285, 365286, 365287, 365289, 365293, 365325, 365327, 365328, 365329, 365330, 365331, 365507, 365512, 365516, 365533, 365537, 365538, 365540, 365544, 365556, 365557, 365563, 365568, 365572, 365574, 365575, 365578, 365579, 365580, 365581, 365582, 365584, 365585, 365587, 365588, 365590, 365591, 365592, 365593, 365594, 365596, 365597, 365600, 365603, 365605, 365606, 365610, 365612, 365613, 365640, 365642, 365644, 365646, 365649, 365650, 365651, 365654, 365655, 365657, 365659, 365661, 365662, 365663, 365664, 365665, 365673, 365674, 365677, 365678, 365681, 365689, 365700, 365703, 365707, 365709, 365710, 365714, 365720, 365723, 365724, 365727, 365739, 365744, 365749, 365756, 365757, 365758, 365760, 365761, 365762, 365764, 365773, 365774, 365781, 365783, 365785, 365787, 365791, 365792, 365793, 365795, 365800, 365804, 365807, 365808, 365814, 365815, 365818, 365832, 365834, 365835, 365857, 365860, 365862, 365971, 365976, 365978, 365979, 365983, 365985, 365986, 366021, 366023, 366561, 366565, 366566, 366605, 366606, 366612, 366760, 366764, 367007, 367126, 367129, 367145, 367148, 367149, 367150, 367173, 367174, 367175, 367192, 367271, 367273, 367275, 367357, 367715, 367716, 367723, 367727, 367739, 367761, 367766, 367768, 367771, 367790, 367795, 368109, 368116, 368118, 368119, 368121, 368122, 368123, 368124, 368126, 368129, 368130, 368209, 368211, 368229, 369207, 369209, 369213, 369220, 370051, 370061, 370070, 370075, 370086, 370089, 370096, 370103, 370107, 370111, 370118, 370132, 370139, 370142, 370156, 370161, 370164, 370168, 370252, 371292, 371293, 371687, 371689, 371903, 371924, 371926, 371927, 371955, 371956, 371958, 371959, 371961, 372134, 373057, 373058, 373060, 373064, 373065, 373108, 373109, 373110, 373111, 373112, 373113, 373161, 373162, 373164, 373165, 373167, 373185, 373186, 373191, 373195, 373418, 373422, 373425, 373430, 374353, 374355, 374357, 374359, 374362, 374363, 374396, 374397, 374401, 374408, 374415, 375046, 375051, 375452, 375458, 375715, 375716, 375717, 375838, 375841, 375857, 375995, 376185, 376189, 376197, 376201, 376203, 376211, 376214, 376215, 376217, 376218, 376221, 376222, 376225, 376226, 376229, 376230, 376232, 377191, 377197, 377202, 377226, 377230, 377232, 378053, 378054, 378057, 378604, 378606, 378760, 379782, 379786, 379812, 379821, 379829, 379871, 379883, 379900, 379905, 379906, 379908, 379911, 379921, 379929, 379936, 379944, 380347, 380348, 380771, 380847, 380851, 380856, 380857, 380862, 380864, 380869, 380874, 380879, 380910, 380912, 380917, 380920, 380922, 380925, 380927, 380928, 380929, 380930, 380931, 382354, 382355, 383129, 383135, 383138, 383164, 383954, 384531, 384644, 384649, 384652, 384912, 384915, 384923, 384925, 384939, 384948, 384953, 385400, 385405, 386609, 386613, 388340, 388345, 388349, 388351, 388352, 388354, 388355, 388357, 388358, 388359, 388360, 389545, 389617, 389640, 389646, 391064, 391088, 391097, 391153, 391348, 391655, 391687, 391689, 391690, 391692, 391695, 391704, 391706, 391707, 391711, 391718, 391719, 391720, 391728, 391730, 391732, 391736, 391743, 391749, 391753, 391756, 391757, 391765, 391770, 391771, 391779, 391794, 391795, 391796, 391798, 391799, 391919, 391920, 391921, 391922, 391924, 391925, 391929, 391930, 391931, 391933, 391934, 391947, 391949, 391952, 391959, 394257, 394261, 394262, 394263, 394564, 395100, 395104, 395106, 395107, 395411, 395549, 395595, 395596, 396778, 396820, 396823, 396831, 396832, 396956, 396957, 396959, 396960, 396962, 396964, 397061, 397064, 398519, 398520, 398522, 398524, 398527, 398529, 398532, 398534, 398537, 398543, 398544, 398547, 400389, 400391, 401501, 401502, 401508, 401514, 402062, 402775, 402776, 402780, 402782, 402828, 402850, 403036, 403050, 403078, 403087, 403091, 403177, 403707, 403708, 403709, 403714, 403725, 403739, 403749, 403756, 403762, 403770, 403771, 405127, 405129, 405512, 405533, 405534, 405541, 405800, 405801, 405802, 405803, 405805, 406287, 408407, 408413, 408415, 408416, 408827, 408831, 409269, 409273, 409283, 409287, 409292, 409298, 409303, 409305, 410904, 410908, 411170, 411275, 411279, 411543, 411544, 411594, 411623, 411632, 411645, 411654, 411658, 411660, 411662, 411666, 412452, 412454, 412455, 412459, 413030, 413032, 413033, 413034, 413105, 413108, 413113, 413132, 413134, 413137, 413142, 413152, 413156, 413159, 413160, 413165, 413167, 413191, 413192, 413226, 413227, 413229, 413231, 413351, 413353, 413366, 413369, 413370, 413372, 413749, 413751, 413974, 413981, 413988, 413994, 414012, 414022, 415475, 415477, 416847, 416859, 416872, 418551, 418552, 419063, 419064, 419914, 419915, 419916, 419917, 419919, 420240, 420294, 420300, 420304, 420422, 420677, 420678, 420682, 420686, 420687, 420699, 420704, 420707, 420713, 420715, 420734, 420736, 420848, 420851, 420853, 421504, 421505, 421509, 423105, 423107, 423108, 423113, 423114, 423115, 423116, 423117, 423120, 423122, 423123, 423124, 423126, 423128, 423132, 423137, 423138, 423139, 423140, 423143, 423300, 423305, 423308, 423477, 423498, 423501, 423502, 423506, 426088, 426089, 426098, 426103, 426108, 426109, 426117, 426119, 426124, 426125, 426130, 426135, 426138, 426140, 426200, 426202, 426204, 426205, 426206, 426210, 426211, 426212, 426213, 426216, 426218, 426219, 426221, 426222, 426587, 426588, 426589, 426592, 426593, 427198, 427239, 427243, 427245, 427249, 427250, 427424, 427425, 427427, 427472, 427473, 427474, 427476, 427481, 427482, 427486, 427487, 427489, 427490, 429042, 429045, 429055, 429689, 429694, 429695, 429734, 429906, 429907, 431460, 431461, 431474, 431479, 431484, 432056, 432074, 432078, 432129, 432242, 432244, 432246, 432249, 432835, 432836, 432856, 432862, 432865, 432887, 432890, 435048, 435050, 435051, 435052, 435053, 435054, 435055, 435056, 435061, 438456, 438457, 438458, 438459, 438460, 438461, 438462, 438486, 438487, 438488, 438490, 438491, 438492, 438493, 438494, 438495, 438496, 439086, 439089, 439095, 439096, 439097, 439684, 439686, 440843, 440846, 440849, 440851, 440860, 440861, 440862, 440884, 440885, 440888, 442647, 442648, 442649, 443801, 443802, 443803, 443908, 443909, 443911, 443912, 443986, 443987, 443989, 443991, 443994, 443996, 443997, 443998, 443999, 444003, 444005, 444341, 444343, 444345, 444346, 444348, 444352, 444388, 444390, 444391, 444402, 444405, 444406, 444697, 444699, 444701, 444704, 445177]

all_formatted_data = []

new_id  = [359985]

for element in id_list:

    recipe_id = element
    #Fetch recipe data from API
    recipes_url = f"https://www.alacalc.com/api/v1/recipes/{recipe_id}"
    recipe_params = {"include": 'nutrition, ingredients_items, allergens'}#parameters to include extra stuff in reciepes
    recipes_res = requests.get(recipes_url, cookies=cookie, params=recipe_params )
    recipes_res.raise_for_status() #checking for errors
    recipe_data = recipes_res.json() #results in json


    ingredients_url = f"https://www.alacalc.com/api/v1/recipes/{recipe_id}/ingredient_items" 
    ingredients_res = requests.get(ingredients_url, cookies=cookie)
    ingredients_res.raise_for_status() #checking for errors
    ingredients_data = ingredients_res.json() #results in json
    #print(f"this is Receipe ingredients for recipe ID number {recipe_id}: \n {ingredients_data}") #print results  

    #print()  # Add an empty line between recipes for clarity
    Receipes = recipe_data["recipes"]
    nutrition = recipe_data['linked']['nutrition']
    allergens = recipe_data.get('allergens', [])

    #Extract Ingredient details
    ingredients_items = recipe_data.get('ingredient_items', [])
    ingred_items = ingredients_data.get('ingredient_items', [])

    #extracting relevant data into empty array
    formatted_data = []

    formatted_data.append([Receipes['id'], 'RECIPE', 'TITLE [E]', Receipes['name']])
    formatted_data.append([Receipes['id'], 'RECIPE', 'DESCRIPTION [E]', Receipes['name']])
    formatted_data.append([Receipes['id'], 'RECIPE', 'SEARCH TERMS [E]', 'TEST PRODUCT v2'])
    formatted_data.append([Receipes['id'], 'RECIPE', 'AUTHOR [E]', 'Project M'])
    formatted_data.append([Receipes['id'], 'RECIPE', 'NUMBER TO SERVE [E]', Receipes['quantity_per_serving']])
    formatted_data.append([Receipes['id'], 'RECIPE', 'SERVE MEASUREMENT [E]', 'recipe'])
    formatted_data.append([Receipes['id'], 'RECIPE', 'IS PUBLIC [E]', 'Y'])
    formatted_data.append([Receipes['id'], 'RECIPE', 'IS ACTIVE [E]', 'Y'])
    formatted_data.append([Receipes['id'], 'RECIPE', 'SHARE WITH ALL USERS [E]', 'Y'])
    formatted_data.append([Receipes['id'], 'ITEMHD', 'TYPE', 'ID', 'DESCRIPTION', 'SIZE', 'REQUIRED QTY [E]', 'QTY MEASUREMENT','WASTAGE [E]','Position [E]', 'Override UOM Qty [E]','Override UOM Description [E]','N'])

    
    prod_desc1 = [] #list of the ingriedents 
    #add ingredients
    for i, ingredient in enumerate(ingred_items, start=1):
        prod_desc = ingredient['ingredient']
       # print(prod_desc)#looped list of ingredients

        prod_desc1.append(ingredient['ingredient'])

        formatted_data.append([
            Receipes['id'], 'INGRED', 'PRODUCT', '443', ingredient['ingredient'],
            ingredient['quantity_unit'], ingredient['quantity'], ingredient['quantity_unit'], 0, i, 0
        ])
    #print(f"part two: {prod_desc1}")
    second_csv = pd.read_csv('new-product-ids.csv')
    sec = pd.DataFrame(second_csv) 

    for element in prod_desc1:
        best_ratio = -1
        best_id = None
        
        keywords = element.split(',')

        for index, row in sec.iterrows():
            product_description = row['DESCRIPTION']
            ratio = fuzz.partial_ratio(' ' .join(keywords), product_description.lower())

            if ratio > best_ratio:
                best_ratio = ratio
                best_id = row['ID']
        
        #print(f"best_ratio: {best_ratio}, new id: {best_id}")

    

        for i, data_row in enumerate(formatted_data):
            if data_row[3] == "443":
                formatted_data[i][3] = str(best_id)
                #print(f"assinged {best_id} to formatted data row {i}")
                break

      
    formatted_data.append([])
    
    all_formatted_data.extend(formatted_data)

df_formatted = pd.DataFrame(all_formatted_data, columns=None)

exit_path  = os.path.join(r"C:\script\ProjectM&M")
df_formatted.to_csv(os.path.join(exit_path, 'Final_Version_2.csv'), index=False)
#df.to_excel(os.path.join(exit_path, 'recipe_359985_v1.xlsx'), index=False)
print(f"Recipe ID: {recipe_id} formatted succesfully")


